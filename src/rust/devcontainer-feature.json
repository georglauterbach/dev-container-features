// ref: https://github.com/devcontainers/spec/blob/main/schemas/devContainerFeature.schema.json
{
  "id": "rust",
  "version": "6.3.1",
  "name": "Development Container Feature - Rust",
  "documentationURL": "https://github.com/georglauterbach/dev-container-features/tree/main/src/rust",
  "description": "Work efficiently and effortlessly with the Rust programming language",
  "options": {
    "rust.install": {
      "description": "In environments where Rust is already installed, set this to false to not install Rust (again)",
      "type": "boolean",
      "default": true
    },
    "rust.install-base-packages": {
      "description": "Install packages Rust required to work properly (like 'build-essential')",
      "type": "boolean",
      "default": true
    },
    "rust.rustup.default-toolchain": {
      "description": "Defines the [toolchain](https://rust-lang.github.io/rustup/concepts/toolchains.html) that will be installed via `rustup`",
      "type": "string",
      "proposals": [
        "none",
        "stable",
        "beta",
        "nightly",
        "1.86.0",
        "1.85.0"
      ],
      "default": "none"
    },
    "rust.rustup.default-toolchain-file": {
      "description": "Defines the [toolchain file](https://rust-lang.github.io/rustup/overrides.html#the-toolchain-file) that contains extra information about the toolchain. This path **must be absolute** and include the file name. This is useful to set a default (global) toolchain when 'rust.rustup.default-toolchain' is not used, but a 'rust-toolchain.toml' exists.",
      "type": "string",
      "proposals": [
        "${containerWorkspaceFolder}/rust-toolchain.toml"
      ],
      "default": ""
    },
    "rust.rustup.update-default-toolchain": {
      "description": "Whether or not to update the default toolchain",
      "type": "boolean",
      "default": false
    },
    "rust.rustup.profile": {
      "description": "Defines the [profile](https://rust-lang.github.io/rustup/concepts/profiles.html) that will be used by `rustup` during the installation",
      "type": "string",
      "proposals": [
        "minimal",
        "default",
        "complete"
      ],
      "default": "minimal"
    },
    "rust.rustup.additional-targets": {
      "description": "A list of [additional targets](https://rust-lang.github.io/rustup/cross-compilation.html) that will be installed by `rustup`",
      "type": "string",
      "proposals": [
        "aarch64-unknown-linux-gnu",
        "x86_64-unknown-redox,x86_64-unknown-uefi"
      ],
      "default": ""
    },
    "rust.rustup.additional-components": {
      "description": "A list of [additional components](https://rust-lang.github.io/rustup/concepts/components.html) that ill be installed by `rustup` (ref: [release-component-target-matrix](https://rust-lang.github.io/rustup-components-history/))",
      "type": "string",
      "proposals": [
        "rustc",
        "cargo,rustfmt",
        "rust-std",
        "miri"
      ],
      "default": ""
    },
    "rust.rustup.dist-server": {
      "description": "The URI for downloading static resources related to Rust ([ref](https://rust-lang.github.io/rustup/environment-variables.html))",
      "type": "string",
      "default": "https://static.rust-lang.org"
    },
    "rust.rustup.update-root": {
      "description": "The URI for downloading self-update ([ref](https://rust-lang.github.io/rustup/environment-variables.html))",
      "type": "string",
      "default": "https://static.rust-lang.org/rustup"
    },
    "rust.rustup.rustup-init.host-triple": {
      "description": "The [host triple](https://wiki.osdev.org/Target_Triplet) (including the architecture) of the system that you want to bootstrap Rust on",
      "type": "string",
      "proposals": [
        "x86_64-unknown-linux-gnu",
        "i686-pc-windows-msvc"
      ],
      "default": ""
    },
    "system.packages.additional-packages": {
      "description": "A list of additional packages to install via the system's package manager. These packages are installed **prior** to Rust.",
      "type": "string",
      "proposals": [
        "gdb-multiarch",
        "jq,qemu-system-riscv64"
      ],
      "default": ""
    },
    "linker.mold.install": {
      "description": "Whether to install the linker [`mold`](https://github.com/rui314/mold)",
      "type": "boolean",
      "default": false
    },
    "linker.mold.version": {
      "description": "The version of the [`mold`](https://github.com/rui314/mold) linker to install",
      "type": "string",
      "default": "2.37.1"
    },
    "proxy.http.http.address": {
      "description": "A URI for an HTTP proxy",
      "type": "string",
      "default": ""
    },
    "proxy.http.https.address": {
      "description": "A URI for an HTTPS proxy",
      "type": "string",
      "default": ""
    },
    "proxy.http.no-proxy.address": {
      "description": "A list of URIs to not proxy",
      "type": "string",
      "default": "localhost,127.0.0.1"
    }
  },
  "containerEnv": {
    "RUSTUP_HOME": "/usr/rust/rustup",
    "CARGO_HOME": "/usr/rust/cargo/home",
    "CARGO_TARGET_DIR": "${containerWorkspaceFolder}/target",
    "PATH": "/usr/rust/cargo/home/bin:${PATH}"
  },
  "postStartCommand": {
    "DevContainer Feature - Rust": [
      "/opt/devcontainer/features/ghcr_io/georglauterbach/rust/post_start_command.sh"
    ]
  },
  "customizations": {
    "vscode": {
      "extensions": [
        "rust-lang.rust-analyzer", // official Rust language server
        "tamasfe.even-better-toml", // language support for TOML
        "vadimcn.vscode-lldb@1.11.4" // LLDB debugger support
      ],
      "settings": {
        // files
        "files.readonlyInclude": {
          // mark toolchain data as read-only
          "${containerEnv:CARGO_HOME}": true,
          "${containerEnv:RUSTUP_HOME}": true,
          "${containerEnv:CARGO_TARGET_DIR}": true
        },
        "files.watcherExclude": {
          // ensure the watcher does not process toolchain data
          "${containerEnv:CARGO_HOME}": true,
          "${containerEnv:RUSTUP_HOME}": true,
          "${containerEnv:CARGO_TARGET_DIR}": true
        },
        "files.exclude": {
          // ensure we do not see Cargo's or rustup's home
          // directories, even when they are inside the repository
          "${containerEnv:CARGO_HOME}": true,
          "${containerEnv:RUSTUP_HOME}": true
        },
        // extension::rust-lang.rust-analyzer
        "rust-analyzer.restartServerOnConfigChange": true,
        "rust-analyzer.checkOnSave": true,
        "rust-analyzer.testExplorer": true,
        "rust-analyzer.debug.engine": "vadimcn.vscode-lldb",
        "rust-analyzer.diagnostics.styleLints.enable": true,
        "rust-analyzer.completion.fullFunctionSignatures.enable": true,
        "rust-analyzer.completion.termSearch.enable": true,
        "rust-analyzer.hover.actions.references.enable": true,
        "rust-analyzer.imports.prefixExternPrelude": true,
        "rust-analyzer.inlayHints.bindingModeHints.enable": true,
        "rust-analyzer.inlayHints.closureCaptureHints.enable": true,
        "rust-analyzer.inlayHints.closureReturnTypeHints.enable": "with_block",
        "rust-analyzer.semanticHighlighting.operator.specialization.enable": true,
        "rust-analyzer.semanticHighlighting.punctuation.enable": true,
        "rust-analyzer.semanticHighlighting.punctuation.separate.macro.bang": true,
        "rust-analyzer.semanticHighlighting.punctuation.specialization.enable": true,
        // extension::vadimcn.vscode-lldb
        "lldb.launch.sourceLanguages": [
          "rust"
        ]
      }
    }
  },
  "capAdd": [
    "SYS_PTRACE"
  ],
  "securityOpt": [
    "seccomp=unconfined"
  ]
}
